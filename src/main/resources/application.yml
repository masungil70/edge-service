server:
  port: 9000 #서버가 연결을 수락하는 포트
  netty:
    connection-timeout: 2s #서버와 TCP연결을 수립하기까지 기다리는 시간
    idle-timeout: 15s #데이터가 전송되지 않는 경우 TCP 연결을 끊기 전에 기다리는 시간
  shutdown: graceful #우아한 종료 활성화

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s #우아한 종료시간을 15초로 설정
  cloud:
    gateway:
      default-filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10 #초당 버킷에 떨어지는 토큰의 수
              burstCapacity: 20 #최대 20개 요청까지 허용
              requestedYokens: 1 #하나의 요청 처리에 몇개의 토큰이 사용되는지 지정

          # name: Retry #필터 이름
          # args:
          #   retries: 3 #최대 3회의 재시도
          #   series: SERVER_ERROR
          #   exception: java.io.IOException, java.util.concurrent.TimeoutException
          # backoff: #재시도는 firstBackOff * (factor ^ n)공식을 사용해 계산
          #   firstBackoff: 50ms
          #   maxBackOff: 500ms
          #   factor: 2
          #   basedOnPreviousValue: false

      httpclient: #http 클라이언트에 대한 속성 설정
        connect-timeout: 2000 #연결을 수립하기까지의 타임아웃(밀리초)
        response-timeout: 5s #응답을 받을 때까지의 타임아웃(기간)
        pool:
          type: elastic # 연결 풀 유형(elastic, fixed, disabled 중 하나)
          max-idle-time: 15s # 통신 채널이 닫히지 전 대기하는 시간
          max-life-time: 60s # 통신 채널이 열려 있는 기간
      routes:
        - id: catalog-routes
          uri: ${CATALOG_SERVICE_URL:http://localhost:9091}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker # 서킷 브레이커 이름
              args:
                name: catalogCircuitBreaker
                fallbackUri: forword:/catalog-fallback #서킷 브레이커가 개방상태일 때 요청을 이 URL로 전달
                statusCodes: 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker # 서킷 브레이커 이름
              args:
                name: orderCircuitBreaker #서킷 브레이커에 대해 정의한 폴백이 없음
                statusCodes: 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499
  data:
    redis:
      connect-timeout: 2s #연결이 수립되기까지 기다리는 시간의 한도
      host: localhost #레디스 호스 기본값
      port: 6379 #레디스 포트 기본값
      password: 70sungil #비밀 번호
      timeout: 1s #응답을 받기까지 기다리는 시간의 한도

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        timeout-duration: 5s

logging:
  level:
    io.github.resilience4j: DEBUG
    org.springframework.web: DEBUG
    org.springframework.cloud.gateway: DEBUG
